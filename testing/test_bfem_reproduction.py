import pytest
import os
import numpy as np

from probability.process.spde_covariances import (
    InverseCovarianceOperator,
    NaturalCovarianceOperator,
    ProjectedPrior,
)
from probability.process import GaussianProcess
from bfem.observation import compute_bfem_observations
from experiments.reproduction.bfem.fig3.fem_props import get_fem_props as get_fig3_props
from experiments.reproduction.bfem.fig245.fem_props import (
    get_fem_props as get_fig245_props,
)

cwd = os.getcwd()
rootdir = os.path.join(cwd[: cwd.rfind(os.path.sep + "probfem")], "probfem")
fig245_path = os.path.join(rootdir, "experiments", "reproduction", "bfem", "fig245")
fig3_path = os.path.join(rootdir, "experiments", "reproduction", "bfem", "fig3")

# some code at the start of each script to suppress matplotlib from showing figures
prefix = ""
prefix += "import matplotlib\n"
prefix += "import warnings\n"
prefix += 'matplotlib.use("agg")\n'
prefix += 'warnings.filterwarnings("ignore", message="Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.")\n'

# some code at the end of each script to suppress matplotlib from showing figures
suffix = ""
suffix += "import matplotlib.pyplot as plt\n"
suffix += "plt.close()\n"


@pytest.mark.bfem
@pytest.mark.reproduction
@pytest.mark.runs
def test_bfem_reproduction_fig2_runs(monkeypatch):
    monkeypatch.chdir(fig245_path)
    exec(prefix + open("fig2.py").read() + suffix)


@pytest.mark.bfem
@pytest.mark.reproduction
@pytest.mark.runs
def test_bfem_reproduction_fig3_runs(monkeypatch):
    monkeypatch.chdir(fig3_path)
    exec(prefix + open("fig3.py").read() + suffix)


@pytest.mark.bfem
@pytest.mark.reproduction
@pytest.mark.runs
def test_bfem_reproduction_fig4_runs(monkeypatch):
    monkeypatch.chdir(fig245_path)
    exec(prefix + open("fig4.py").read() + suffix)


@pytest.mark.bfem
@pytest.mark.reproduction
@pytest.mark.runs
def test_bfem_reproduction_fig5_runs(monkeypatch):
    monkeypatch.chdir(fig245_path)
    exec(prefix + open("fig5.py").read() + suffix)


@pytest.mark.bfem
@pytest.mark.reproduction
@pytest.mark.values
def test_bfem_reproduction_fig3_values(ref_values, monkeypatch):
    monkeypatch.chdir(fig3_path)

    fprops = get_fig3_props("meshes/1d-lin-64.mesh")
    K_cov = InverseCovarianceOperator(model_props=fprops["model"], scale=1.0)
    M_cov = NaturalCovarianceOperator(
        model_props=fprops["model"], scale=1.0, lumped_mass_matrix=False
    )

    for inf_cov in [K_cov, M_cov]:
        if isinstance(inf_cov, InverseCovarianceOperator):
            cov_name = "K"
        elif isinstance(inf_cov, NaturalCovarianceOperator):
            cov_name = "M"
        else:
            assert False

        sub_ref_values = ref_values["fig3"][cov_name]

        inf_prior = GaussianProcess(None, inf_cov)
        fine_prior = ProjectedPrior(
            prior=inf_prior, init_props=fprops["init"], solve_props=fprops["solve"]
        )
        fglobdat = fine_prior.globdat

        mean_u_prior = fine_prior.calc_mean()
        std_u_prior = fine_prior.calc_std()

        # Loop over different densities of the coarse mesh
        for N_coarse in [4, 16]:
            cprops = get_fig3_props("meshes/1d-lin-{}.mesh".format(N_coarse))
            coarse_prior = ProjectedPrior(
                prior=inf_prior, init_props=cprops["init"], solve_props=cprops["solve"]
            )

            PhiT = compute_bfem_observations(coarse_prior, fine_prior, fspace=False)
            H_obs = PhiT @ fglobdat["matrix0"]
            f_obs = PhiT @ fglobdat["extForce"]

            posterior = fine_prior.condition_on(H_obs, f_obs)
            mean_u_post = posterior.calc_mean()
            std_u_post = posterior.calc_std()

            assert np.allclose(mean_u_prior, sub_ref_values["mean_u_prior"])
            assert np.allclose(mean_u_post, sub_ref_values["mean_u_post"][N_coarse])
            assert np.allclose(std_u_prior, sub_ref_values["std_u_prior"])
            assert np.allclose(std_u_post, sub_ref_values["std_u_post"][N_coarse])


@pytest.mark.bfem
@pytest.mark.reproduction
@pytest.mark.values
def test_bfem_reproduction_fig245_values(ref_values, monkeypatch):
    monkeypatch.chdir(fig245_path)

    cprops = get_fig245_props("meshes/plate_r0.msh")
    fprops = get_fig245_props("meshes/plate_r1.msh")

    K_cov = InverseCovarianceOperator(model_props=fprops["model"], scale=1.0)
    M_cov = NaturalCovarianceOperator(
        model_props=fprops["model"], scale=1.0, lumped_mass_matrix=False
    )

    for inf_cov in [K_cov, M_cov]:
        if isinstance(inf_cov, InverseCovarianceOperator):
            cov_name = "K"
        elif isinstance(inf_cov, NaturalCovarianceOperator):
            cov_name = "M"
        else:
            assert False

        sub_ref_values = ref_values["fig3"][cov_name]

        inf_prior = GaussianProcess(None, inf_cov)
        fine_prior = ProjectedPrior(
            prior=inf_prior, init_props=fprops["init"], solve_props=fprops["solve"]
        )
        fglobdat = fine_prior.globdat
        coarse_prior = ProjectedPrior(
            prior=inf_prior, init_props=cprops["init"], solve_props=cprops["solve"]
        )

        PhiT = compute_bfem_observations(coarse_prior, fine_prior, fspace=False)
        H_obs = PhiT @ fglobdat["matrix0"]
        f_obs = PhiT @ fglobdat["extForce"]

        posterior = fine_prior.condition_on(H_obs, f_obs)

        u = fglobdat["state0"]
        f = fglobdat["extForce"]
        mean_u_prior = fine_prior.calc_mean()
        std_u_prior = fine_prior.calc_std()
        mean_u_post = posterior.calc_mean()
        std_u_post = posterior.calc_std()

        sub_ref_values = ref_values["fig245"][cov_name]

        assert np.allclose(u[::100], sub_ref_values["state0"])
        assert np.allclose(f[::100], sub_ref_values["extForce"])
        assert np.allclose(mean_u_prior[::100], sub_ref_values["mean_u_prior"])
        assert np.allclose(mean_u_post[::100], sub_ref_values["mean_u_post"])
        assert np.allclose(std_u_prior[::100], sub_ref_values["std_u_prior"])
        assert np.allclose(std_u_post[::100], sub_ref_values["std_u_post"])


@pytest.fixture
def ref_values():
    ref_values = {
        "fig3": {
            "K": {
                # fmt: off
                "mean_u_prior": 0.0,
                "std_u_prior": np.array([
                    1.00000000e-08, 3.96138585e-01, 5.61450352e-01, 6.89150490e-01,
                    7.97532703e-01, 8.93668946e-01, 9.81179944e-01, 1.06221336e+00,
                    1.13816670e+00, 1.21000966e+00, 1.27844768e+00, 1.34401296e+00,
                    1.40711887e+00, 1.46809408e+00, 1.52720513e+00, 1.58467180e+00,
                    1.64067787e+00, 1.69537896e+00, 1.74890824e+00, 1.80138078e+00,
                    1.85289679e+00, 1.90354426e+00, 1.95340089e+00, 2.00253571e+00,
                    2.05101036e+00, 2.09888009e+00, 2.14619461e+00, 2.19299873e+00,
                    2.23933292e+00, 2.28523374e+00, 2.33073417e+00, 2.37586387e+00,
                    2.42064936e+00, 2.46511412e+00, 2.50927864e+00, 2.55316041e+00,
                    2.59677376e+00, 2.64012966e+00, 2.68323546e+00, 2.72609441e+00,
                    2.76870508e+00, 2.81106057e+00, 2.85314748e+00, 2.89494451e+00,
                    2.93642066e+00, 2.97753283e+00, 3.01822257e+00, 3.05841176e+00,
                    3.09799666e+00, 3.13683967e+00, 3.17475777e+00, 3.21150590e+00,
                    3.24675262e+00, 3.28004353e+00, 3.31074471e+00, 3.33795225e+00,
                    3.36034146e+00, 3.37590300e+00, 3.38145226e+00, 3.37164431e+00,
                    3.33678529e+00, 3.25723894e+00, 3.08578386e+00, 2.66709036e+00,
                    1.00000000e-08]),
                "mean_u_post": {
                    4: np.array([
                         0.        ,  0.30503587,  0.61007173,  0.9151076 ,
                         1.22014347,  1.52517934,  1.8302152 ,  2.13525107,
                         2.44028694,  2.7453228 ,  3.05035867,  3.35539454,
                         3.66043041,  3.96546627,  4.27050214,  4.57553801,
                         4.88057387,  5.11930179,  5.35802971,  5.59675763,
                         5.83548555,  6.07421347,  6.31294138,  6.5516693 ,
                         6.79039722,  7.02912514,  7.26785306,  7.50658098,
                         7.74530889,  7.98403681,  8.22276473,  8.46149265,
                         8.70022057,  8.7865489 ,  8.87287724,  8.95920558,
                         9.04553392,  9.13186225,  9.21819059,  9.30451893,
                         9.39084726,  9.4771756 ,  9.56350394,  9.64983228,
                         9.73616061,  9.82248895,  9.90881729,  9.99514563,
                        10.08147396,  9.45138184,  8.82128972,  8.19119759,
                         7.56110547,  6.93101335,  6.30092123,  5.6708291 ,
                         5.04073698,  4.41064486,  3.78055274,  3.15046061,
                         2.52036849,  1.89027637,  1.26018425,  0.63009212,
                         0.]),
                    16: np.array([
                         0.        ,  0.3559814 ,  0.71196279,  1.06794419,
                         1.42392559,  1.77189262,  2.11985966,  2.4678267 ,
                         2.81579374,  3.15457315,  3.49335256,  3.83213197,
                         4.17091138,  4.49905192,  4.82719245,  5.15533298,
                         5.48347351,  5.79915056,  6.11482761,  6.43050466,
                         6.74618171,  7.04705727,  7.34793283,  7.64880839,
                         7.94968396,  8.23269405,  8.51570414,  8.79871424,
                         9.08172433,  9.34274375,  9.60376318,  9.8647826 ,
                        10.12580202, 10.3590903 , 10.59237857, 10.82566684,
                        11.05895512, 11.25618659, 11.45341806, 11.65064953,
                        11.847881  , 11.99631839, 12.14475577, 12.29319316,
                        12.44163054, 12.52033944, 12.59904833, 12.67775723,
                        12.75646612, 12.72736035, 12.69825457, 12.66914879,
                        12.64004301, 12.42210811, 12.20417322, 11.98623832,
                        11.76830343, 11.13425574, 10.50020805,  9.86616036,
                         9.23211267,  6.9240845 ,  4.61605633,  2.30802817,
                         0.]),
                },
                "std_u_post": {
                    4: np.array([
                        1.00000000e-08, 3.83108621e-01, 5.24034583e-01, 6.19311172e-01,
                        6.88187037e-01, 7.38109138e-01, 7.72777975e-01, 7.94211940e-01,
                        8.03489503e-01, 8.01052278e-01, 7.86811363e-01, 7.60124775e-01,
                        7.19632114e-01, 6.62833313e-01, 5.85027417e-01, 4.76059799e-01,
                        3.04157250e-01, 5.52807618e-01, 7.02390164e-01, 8.09825181e-01,
                        8.90522116e-01, 9.51330452e-01, 9.95919895e-01, 1.02642582e+00,
                        1.04410261e+00, 1.04961767e+00, 1.04318287e+00, 1.02459211e+00,
                        9.93182076e-01, 9.47698196e-01, 8.85994965e-01, 8.04367999e-01,
                        6.95860808e-01, 9.24981171e-01, 1.09025146e+00, 1.21795162e+00,
                        1.31903900e+00, 1.39928882e+00, 1.46212671e+00, 1.50971284e+00,
                        1.54343541e+00, 1.56415864e+00, 1.57235164e+00, 1.56814988e+00,
                        1.55137055e+00, 1.52148702e+00, 1.47755472e+00, 1.41806389e+00,
                        1.34066065e+00, 1.72745702e+00, 2.02658564e+00, 2.27253410e+00,
                        2.48068199e+00, 2.65929811e+00, 2.81319615e+00, 2.94514674e+00,
                        3.05644265e+00, 3.14701631e+00, 3.21516944e+00, 3.25672318e+00,
                        3.26291630e+00, 3.21486848e+00, 3.06597191e+00, 2.66137209e+00,
                        1.00000000e-08]),
                    16: np.array([
                        1.00000000e-08, 3.42405346e-01, 3.95586991e-01, 3.43175144e-01,
                        3.32970105e-02, 3.55938027e-01, 4.11179053e-01, 3.58143550e-01,
                        6.57077496e-02, 3.73480244e-01, 4.30679135e-01, 3.77280752e-01,
                        1.00445062e-01, 3.95462264e-01, 4.54557571e-01, 4.01025030e-01,
                        1.37920071e-01, 4.22376972e-01, 4.83373917e-01, 4.29888597e-01,
                        1.78613068e-01, 4.54826836e-01, 5.17825582e-01, 4.64510699e-01,
                        2.23132344e-01, 4.93593652e-01, 5.58821825e-01, 5.05735511e-01,
                        2.72272554e-01, 5.39743607e-01, 6.07599246e-01, 5.54729673e-01,
                        3.27101905e-01, 5.94793816e-01, 6.65910873e-01, 6.13170557e-01,
                        3.89104345e-01, 6.60996098e-01, 7.36356418e-01, 6.83571522e-01,
                        4.60426115e-01, 7.41864334e-01, 8.23007919e-01, 7.69895532e-01,
                        5.44333755e-01, 8.43262903e-01, 9.32724080e-01, 8.78842355e-01,
                        6.46140731e-01, 9.75984497e-01, 1.07832582e+00, 1.02295446e+00,
                        7.75295548e-01, 1.16321380e+00, 1.28803104e+00, 1.22981452e+00,
                        9.50710660e-01, 1.47086706e+00, 1.64527584e+00, 1.58047284e+00,
                        1.21344648e+00, 2.27484251e+00, 2.66582841e+00, 2.55137527e+00,
                        1.00000000e-08]),
                },
                # fmt: on
            },
            "M": {
                # fmt: off
                "mean_u_prior": 0.0,
                "std_u_prior": np.array([
                    1.00000000e-08, 9.81718581e-02, 1.96527538e-01, 2.95315073e-01,
                    3.94524567e-01, 4.94145264e-01, 5.94165641e-01, 6.94573363e-01,
                    7.95355223e-01, 8.96497072e-01, 9.97983737e-01, 1.09979893e+00,
                    1.20192517e+00, 1.30434363e+00, 1.40703409e+00, 1.50997471e+00,
                    1.61314199e+00, 1.71651052e+00, 1.82005284e+00, 1.92373924e+00,
                    2.02753752e+00, 2.13141274e+00, 2.23532694e+00, 2.33923882e+00,
                    2.44310337e+00, 2.54687147e+00, 2.65048942e+00, 2.75389841e+00,
                    2.85703391e+00, 2.95982499e+00, 3.06219351e+00, 3.16405322e+00,
                    3.26530867e+00, 3.36585397e+00, 3.46557138e+00, 3.56432957e+00,
                    3.66198164e+00, 3.75836272e+00, 3.85328719e+00, 3.94654524e+00,
                    4.03789881e+00, 4.12707659e+00, 4.21376799e+00, 4.29761558e+00,
                    4.37820579e+00, 4.45505718e+00, 4.52760557e+00, 4.59518495e+00,
                    4.65700266e+00, 4.71210671e+00, 4.75934201e+00, 4.79729081e+00,
                    4.82418993e+00, 4.83781329e+00, 4.83530061e+00, 4.81290019e+00,
                    4.76556871e+00, 4.68632139e+00, 4.56512083e+00, 4.38684962e+00,
                    4.12728868e+00, 3.74419039e+00, 3.15401657e+00, 2.15394363e+00,
                    1.00000000e-08]),
                "mean_u_post": {
                    4: np.array([
                         0.        ,  0.30867682,  0.62533288,  0.95004663,  1.28205687,
                         1.62056419,  1.9647284 ,  2.31366569,  2.66644562,  3.02208769,
                         3.37955781,  3.73776426,  4.09555336,  4.4517047 ,  4.80492592,
                         5.15384695,  5.49701364,  5.83316877,  6.16215083,  6.48408774,
                         6.79911537,  7.10737824,  7.40903032,  7.70423587,  7.9931704 ,
                         8.27602179,  8.55299149,  8.82429589,  9.09016794,  9.35085883,
                         9.6066401 ,  9.85780592, 10.10467573, 10.34740567, 10.58537407,
                        10.81769126, 11.04337407, 11.26133235, 11.47035311, 11.66908153,
                        11.85599816, 12.02939141, 12.18732409, 12.32759226, 12.44767443,
                        12.54466798, 12.61520894, 12.65536962, 12.66052615, 12.62592412,
                        12.54900654, 12.4275024 , 12.25860348, 12.03878434, 11.76354061,
                        11.42699717, 11.0213    , 10.53563172,  9.95453277,  9.25484677,
                         8.39967826,  7.32501868,  5.90499789,  3.83575399,  0.]),
                    16: np.array([
                         0.        ,  0.35976616,  0.72582548,  1.0951175 ,  1.46344854,
                         1.82733512,  2.18685759,  2.54305147,  2.89700629,  3.24961029,
                         3.60074401,  3.95001218,  4.29699688,  4.64133086,  4.98293129,
                         5.32178804,  5.65788991,  5.99120312,  6.32160389,  6.64893754,
                         6.97303848,  7.29373604,  7.61087482,  7.92429474,  8.23382324,
                         8.53927274,  8.84043513,  9.13708358,  9.42897186,  9.71583356,
                         9.99738403, 10.27331373, 10.5432836 , 10.80692218, 11.06382401,
                        11.31354225, 11.55558185, 11.78939493, 12.01437985, 12.22986546,
                        12.43509716, 12.62922329, 12.81127931, 12.98016565, 13.13462123,
                        13.27320566, 13.39430784, 13.49605819, 13.57625   , 13.63221618,
                        13.6605832 , 13.65720091, 13.61695084, 13.5336791 , 13.40065467,
                        13.2094183 , 12.94867792, 12.60166213, 12.13878579, 11.51420898,
                        10.65510038,  9.4455689 ,  7.71155517,  5.05292276,  0.]),
                },
                "std_u_post": {
                    4: np.array([
                        1.00000000e-08, 3.95752238e-02, 7.42054112e-02, 1.03958933e-01,
                        1.28841525e-01, 1.48914986e-01, 1.64314605e-01, 1.75273593e-01,
                        1.82158005e-01, 1.85516044e-01, 1.86144572e-01, 1.85168818e-01,
                        1.84110473e-01, 1.84877180e-01, 1.89564375e-01, 2.00011281e-01,
                        2.17273926e-01, 2.40951582e-01, 2.68499990e-01, 2.97466385e-01,
                        3.26069425e-01, 3.53073891e-01, 3.77657941e-01, 3.99324161e-01,
                        4.17852373e-01, 4.33282612e-01, 4.45917541e-01, 4.56334238e-01,
                        4.65393364e-01, 4.74228990e-01, 4.84196664e-01, 4.96755835e-01,
                        5.13272900e-01, 5.34444277e-01, 5.59238488e-01, 5.86125880e-01,
                        6.13652455e-01, 6.40602549e-01, 6.66107837e-01, 6.89734441e-01,
                        7.11572813e-01, 7.32343457e-01, 7.53516435e-01, 7.77421169e-01,
                        8.07294240e-01, 8.47187546e-01, 9.01667914e-01, 9.75315946e-01,
                        1.07215722e+00, 1.19370540e+00, 1.33464933e+00, 1.48862390e+00,
                        1.65006913e+00, 1.81401202e+00, 1.97570535e+00, 2.13021742e+00,
                        2.27195440e+00, 2.39402444e+00, 2.48726090e+00, 2.53852569e+00,
                        2.52740949e+00, 2.41895802e+00, 2.14474882e+00, 1.53940940e+00,
                        1.00000000e-08]),
                    16: np.array([
                        1.00000000e-08, 1.52248643e-02, 1.94530683e-02, 1.44530612e-02,
                        8.40698219e-03, 1.71508673e-02, 2.22055951e-02, 2.00115967e-02,
                        1.73395666e-02, 2.41822822e-02, 2.91992244e-02, 2.81841150e-02,
                        2.69415449e-02, 3.31406992e-02, 3.81047566e-02, 3.77779440e-02,
                        3.73028113e-02, 4.32821685e-02, 4.83169491e-02, 4.84920986e-02,
                        4.85547437e-02, 5.45815495e-02, 5.98102705e-02, 6.03826173e-02,
                        6.08640519e-02, 6.71350913e-02, 7.26847818e-02, 7.36033363e-02,
                        7.44502284e-02, 8.11562432e-02, 8.71722570e-02, 8.84160726e-02,
                        8.96089842e-02, 9.69659498e-02, 1.03629340e-01, 1.05199313e-01,
                        1.06753196e-01, 1.15063504e-01, 1.22639195e-01, 1.24553281e-01,
                        1.26480400e-01, 1.36125442e-01, 1.44954822e-01, 1.47246406e-01,
                        1.49722886e-01, 1.61642762e-01, 1.72562754e-01, 1.75267234e-01,
                        1.77944767e-01, 1.92454445e-01, 2.05747683e-01, 2.08886826e-01,
                        2.14313301e-01, 2.39343401e-01, 2.62015581e-01, 2.65365709e-01,
                        2.62536905e-01, 2.80677792e-01, 2.95570739e-01, 2.95996211e-01,
                        3.64721982e-01, 5.74857913e-01, 7.61457812e-01, 7.33073356e-01,
                        1.00000000e-08]),
                },
                # fmt: on
            },
        },
        "fig245": {
            "K": {
                # fmt: off
                "state0": np.array([
                    0.        ,  0.6641381 ,  5.88877076,  0.20828705,  3.55847796,
                    3.38816884,  0.43436984,  1.77841521,  0.43177599,  4.34424588,
                   -1.82935555, -0.44161956, -0.55597123, -0.49542699, -3.07169624,
                   -0.30834745, -2.05237103, -0.01224141, -0.06750645]),
                "extForce": np.array([
                    0.0088067 , 0.01677837, 0.00585161, 0.02723204, 0.00088413,
                    0.00059633, 0.01580175, 0.00107385, 0.00266157, 0.00139018,
                    0.        , 0.        , 0.        , 0.        , 0.        ,
                    0.        , 0.        , 0.        , 0.        ]),
                "mean_u_prior": 0.0,
                "std_u_prior": np.array([
                    1.00000000e-08, 6.61968587e-01, 1.64327640e+00, 4.80444345e-01,
                    1.81370122e+00, 1.53917592e+00, 5.86098309e-01, 1.14439018e+00,
                    8.77053723e-01, 1.63628824e+00, 2.24814417e+00, 4.82790411e+00,
                    1.56964620e+00, 4.90566428e+00, 3.22667453e+00, 5.65528299e+00,
                    4.37926614e+00, 1.30523756e+00, 1.20377741e+00]),
                "mean_u_post": np.array([
                    0.00000000e+00,  6.53007254e-01,  5.62265036e+00,  1.98561640e-01,
                    3.51608711e+00,  3.30788677e+00,  4.22657792e-01,  1.75828789e+00,
                    4.60957098e-01,  4.22909100e+00, -1.67854505e+00, -4.41994151e-01,
                   -5.26144597e-01, -5.26234506e-01, -2.80257746e+00, -3.83349289e-01,
                   -1.89196645e+00, -2.18812730e-03, -5.65726350e-02]),
                "std_u_post": np.array([
                    1.00000000e-08, 2.53964976e-01, 4.49618139e-01, 4.05933079e-01,
                    6.38645201e-01, 4.59530909e-01, 3.77736714e-01, 4.35482806e-01,
                    4.04976659e-01, 4.50377699e-01, 8.09771069e-01, 1.79860134e+00,
                    6.69734459e-01, 1.88552404e+00, 1.15900295e+00, 1.90927193e+00,
                    1.63813658e+00, 6.56928902e-01, 6.53156607e-01]),
                # fmt: on
            },
            "M": {
                # fmt: off
                "state0": np.array([
                    0.        ,  0.6641381 ,  5.88877076,  0.20828705,  3.55847796,
                    3.38816884,  0.43436984,  1.77841521,  0.43177599,  4.34424588,
                   -1.82935555, -0.44161956, -0.55597123, -0.49542699, -3.07169624,
                   -0.30834745, -2.05237103, -0.01224141, -0.06750645]),
                "extForce": np.array([
                    0.0088067 , 0.01677837, 0.00585161, 0.02723204, 0.00088413,
                    0.00059633, 0.01580175, 0.00107385, 0.00266157, 0.00139018,
                    0.        , 0.        , 0.        , 0.        , 0.        ,
                    0.        , 0.        , 0.        , 0.        ]),
                "mean_u_prior": 0.0,
                "std_u_prior": np.array([
                    1.00000000e-08, 4.19638839e-01, 2.93898975e+00, 1.12624759e-01,
                    3.74857084e+00, 3.06745009e+00, 2.76447838e-01, 9.65384679e-01,
                    2.73224098e-01, 2.85063684e+00, 3.33207121e+00, 1.57058342e+01,
                    1.53458622e+00, 1.58721993e+01, 7.45691421e+00, 1.79809410e+01,
                    1.32884093e+01, 1.08945442e+00, 9.43875422e-01]),
                "mean_u_post": np.array([
                    0.        ,  0.66402679,  5.88869977,  0.20516844,  3.55843522,
                    3.38811823,  0.43517598,  1.77835478,  0.4317742 ,  4.34418341,
                   -1.82880197, -0.44119254, -0.5554297 , -0.49499994, -3.07117215,
                   -0.30792139, -2.0519142 , -0.01180193, -0.06689721]),
               "std_u_post": np.array([
                    1.00000000e-08, 7.40240596e-03, 1.08655593e-02, 2.19720196e-02,
                    1.04165761e-02, 7.68847479e-03, 1.32277537e-02, 6.00021997e-03,
                    6.94426585e-03, 7.31151919e-03, 3.33384073e-02, 4.91353661e-02,
                    3.25608393e-02, 5.26629414e-02, 3.71174628e-02, 5.49826151e-02,
                    4.49675593e-02, 3.26348792e-02, 3.39658230e-02]),
                # fmt: on
            },
        },
    }
    return ref_values

import pytest
import os
import numpy as np

from probability.process.spde_covariances import (
    InverseCovarianceOperator,
    NaturalCovarianceOperator,
    ProjectedPrior,
)
from probability.process import GaussianProcess
from bfem.observation import compute_bfem_observations
from fem.jive import CJiveRunner
from fem.meshing import mesh_interval_with_line2, read_mesh
from experiments.reproduction.bfem.fig3.fem_props import get_fem_props as get_fig3_props
from experiments.reproduction.bfem.fig245.fem_props import (
    get_fem_props as get_fig245_props,
)

cwd = os.getcwd()
rootdir = os.path.join(cwd[: cwd.rfind(os.path.sep + "probfem")], "probfem")
fig245_path = os.path.join(rootdir, "experiments", "reproduction", "bfem", "fig245")
fig3_path = os.path.join(rootdir, "experiments", "reproduction", "bfem", "fig3")

# some code at the start of each script to suppress matplotlib from showing figures
prefix = ""
prefix += "import matplotlib\n"
prefix += "import warnings\n"
prefix += 'matplotlib.use("agg")\n'
prefix += 'warnings.filterwarnings("ignore", message="Matplotlib is currently using agg, which is a non-GUI backend, so cannot show the figure.")\n'

# some code at the end of each script to suppress matplotlib from showing figures
suffix = ""
suffix += "import matplotlib.pyplot as plt\n"
suffix += "plt.close()\n"


@pytest.mark.bfem
@pytest.mark.reproduction
@pytest.mark.runs
def test_bfem_reproduction_fig2_runs(monkeypatch):
    monkeypatch.chdir(fig245_path)
    exec(prefix + open("fig2.py").read() + suffix)


@pytest.mark.bfem
@pytest.mark.reproduction
@pytest.mark.runs
def test_bfem_reproduction_fig3_runs(monkeypatch):
    monkeypatch.chdir(fig3_path)
    exec(prefix + open("fig3.py").read() + suffix)


@pytest.mark.bfem
@pytest.mark.reproduction
@pytest.mark.runs
def test_bfem_reproduction_fig4_runs(monkeypatch):
    monkeypatch.chdir(fig245_path)
    exec(prefix + open("fig4.py").read() + suffix)


@pytest.mark.bfem
@pytest.mark.reproduction
@pytest.mark.runs
def test_bfem_reproduction_fig5_runs(monkeypatch):
    monkeypatch.chdir(fig245_path)
    exec(prefix + open("fig5.py").read() + suffix)


@pytest.mark.bfem
@pytest.mark.reproduction
@pytest.mark.values
def test_bfem_reproduction_fig3_values(ref_values, monkeypatch):
    monkeypatch.chdir(fig3_path)

    for cov_name in ["K", "M"]:
        module_props = get_fig3_props()
        model_props = module_props.pop("model")
        _, fine_elems = mesh_interval_with_line2(n=64)
        fine_jive = CJiveRunner(module_props, elems=fine_elems)

        if cov_name == "K":
            inf_cov = InverseCovarianceOperator(model_props=model_props, scale=1.0)
        elif cov_name == "M":
            inf_cov = NaturalCovarianceOperator(
                model_props=model_props, scale=1.0, lumped_mass_matrix=False
            )
        else:
            assert False

        sub_ref_values = ref_values["fig3"][cov_name]

        inf_prior = GaussianProcess(None, inf_cov)
        fine_prior = ProjectedPrior(prior=inf_prior, jive_runner=fine_jive)
        mean_u_prior = fine_prior.calc_mean()
        std_u_prior = fine_prior.calc_std()

        # Loop over different densities of the coarse mesh
        for N_coarse in [4, 16]:
            module_props = get_fig3_props()
            model_props = module_props.pop("model")
            _, coarse_elems = mesh_interval_with_line2(n=N_coarse)
            coarse_jive = CJiveRunner(module_props, elems=coarse_elems)

            coarse_prior = ProjectedPrior(prior=inf_prior, jive_runner=coarse_jive)
            H_obs, f_obs = compute_bfem_observations(coarse_prior, fine_prior)
            posterior = fine_prior.condition_on(H_obs, f_obs)
            mean_u_post = posterior.calc_mean()
            std_u_post = posterior.calc_std()

            assert np.allclose(mean_u_prior, sub_ref_values["mean_u_prior"])
            assert np.allclose(mean_u_post, sub_ref_values["mean_u_post"][N_coarse])
            assert np.allclose(std_u_prior, sub_ref_values["std_u_prior"])
            assert np.allclose(std_u_post, sub_ref_values["std_u_post"][N_coarse])


@pytest.mark.bfem
@pytest.mark.reproduction
@pytest.mark.values
def test_bfem_reproduction_fig245_values(ref_values, monkeypatch):
    monkeypatch.chdir(fig245_path)

    for cov_name in ["K", "M"]:
        module_props = get_fig245_props()
        model_props = module_props.pop("model")
        _, coarse_elems = read_mesh("meshes/plate_r0.msh")
        _, fine_elems = read_mesh("meshes/plate_r1.msh")

        if cov_name == "K":
            inf_cov = InverseCovarianceOperator(model_props=model_props, scale=1.0)
        elif cov_name == "M":
            inf_cov = NaturalCovarianceOperator(
                model_props=model_props, scale=1.0, lumped_mass_matrix=False
            )
        else:
            assert False

        sub_ref_values = ref_values["fig3"][cov_name]

        inf_prior = GaussianProcess(None, inf_cov)
        fine_jive = CJiveRunner(module_props, elems=fine_elems)
        fine_prior = ProjectedPrior(prior=inf_prior, jive_runner=fine_jive)
        coarse_jive = CJiveRunner(module_props, elems=coarse_elems)
        coarse_prior = ProjectedPrior(prior=inf_prior, jive_runner=coarse_jive)

        H_obs, f_obs = compute_bfem_observations(coarse_prior, fine_prior)
        posterior = fine_prior.condition_on(H_obs, f_obs)

        fglobdat = fine_prior.globdat
        u = fglobdat["state0"]
        f = fglobdat["extForce"]
        mean_u_prior = fine_prior.calc_mean()
        std_u_prior = fine_prior.calc_std()
        mean_u_post = posterior.calc_mean()
        std_u_post = posterior.calc_std()

        sub_ref_values = ref_values["fig245"][cov_name]

        assert np.allclose(u[::100], sub_ref_values["state0"])
        assert np.allclose(f[::100], sub_ref_values["extForce"])
        assert np.allclose(mean_u_prior[::100], sub_ref_values["mean_u_prior"])
        assert np.allclose(mean_u_post[::100], sub_ref_values["mean_u_post"])
        assert np.allclose(std_u_prior[::100], sub_ref_values["std_u_prior"])
        assert np.allclose(std_u_post[::100], sub_ref_values["std_u_post"])


@pytest.fixture
def ref_values():
    ref_values = {
        "fig3": {
            "K": {
                # fmt: off
                "mean_u_prior": 0.0,
                "std_u_prior": np.array([
                    1.00000000e-08, 3.96138585e-01, 5.61450352e-01, 6.89150490e-01,
                    7.97532703e-01, 8.93668946e-01, 9.81179944e-01, 1.06221336e+00,
                    1.13816670e+00, 1.21000966e+00, 1.27844768e+00, 1.34401296e+00,
                    1.40711887e+00, 1.46809408e+00, 1.52720513e+00, 1.58467180e+00,
                    1.64067787e+00, 1.69537896e+00, 1.74890824e+00, 1.80138078e+00,
                    1.85289679e+00, 1.90354426e+00, 1.95340089e+00, 2.00253571e+00,
                    2.05101036e+00, 2.09888009e+00, 2.14619461e+00, 2.19299873e+00,
                    2.23933292e+00, 2.28523374e+00, 2.33073417e+00, 2.37586387e+00,
                    2.42064936e+00, 2.46511412e+00, 2.50927864e+00, 2.55316041e+00,
                    2.59677376e+00, 2.64012966e+00, 2.68323546e+00, 2.72609441e+00,
                    2.76870508e+00, 2.81106057e+00, 2.85314748e+00, 2.89494451e+00,
                    2.93642066e+00, 2.97753283e+00, 3.01822257e+00, 3.05841176e+00,
                    3.09799666e+00, 3.13683967e+00, 3.17475777e+00, 3.21150590e+00,
                    3.24675262e+00, 3.28004353e+00, 3.31074471e+00, 3.33795225e+00,
                    3.36034146e+00, 3.37590300e+00, 3.38145226e+00, 3.37164431e+00,
                    3.33678529e+00, 3.25723894e+00, 3.08578386e+00, 2.66709036e+00,
                    1.00000000e-08]),
                "mean_u_post": {
                    4: np.array([
                         0.        ,  0.30503587,  0.61007173,  0.9151076 ,
                         1.22014347,  1.52517934,  1.8302152 ,  2.13525107,
                         2.44028694,  2.7453228 ,  3.05035867,  3.35539454,
                         3.66043041,  3.96546627,  4.27050214,  4.57553801,
                         4.88057387,  5.11930179,  5.35802971,  5.59675763,
                         5.83548555,  6.07421347,  6.31294138,  6.5516693 ,
                         6.79039722,  7.02912514,  7.26785306,  7.50658098,
                         7.74530889,  7.98403681,  8.22276473,  8.46149265,
                         8.70022057,  8.7865489 ,  8.87287724,  8.95920558,
                         9.04553392,  9.13186225,  9.21819059,  9.30451893,
                         9.39084726,  9.4771756 ,  9.56350394,  9.64983228,
                         9.73616061,  9.82248895,  9.90881729,  9.99514563,
                        10.08147396,  9.45138184,  8.82128972,  8.19119759,
                         7.56110547,  6.93101335,  6.30092123,  5.6708291 ,
                         5.04073698,  4.41064486,  3.78055274,  3.15046061,
                         2.52036849,  1.89027637,  1.26018425,  0.63009212,
                         0.]),
                    16: np.array([
                         0.        ,  0.3559814 ,  0.71196279,  1.06794419,
                         1.42392559,  1.77189262,  2.11985966,  2.4678267 ,
                         2.81579374,  3.15457315,  3.49335256,  3.83213197,
                         4.17091138,  4.49905192,  4.82719245,  5.15533298,
                         5.48347351,  5.79915056,  6.11482761,  6.43050466,
                         6.74618171,  7.04705727,  7.34793283,  7.64880839,
                         7.94968396,  8.23269405,  8.51570414,  8.79871424,
                         9.08172433,  9.34274375,  9.60376318,  9.8647826 ,
                        10.12580202, 10.3590903 , 10.59237857, 10.82566684,
                        11.05895512, 11.25618659, 11.45341806, 11.65064953,
                        11.847881  , 11.99631839, 12.14475577, 12.29319316,
                        12.44163054, 12.52033944, 12.59904833, 12.67775723,
                        12.75646612, 12.72736035, 12.69825457, 12.66914879,
                        12.64004301, 12.42210811, 12.20417322, 11.98623832,
                        11.76830343, 11.13425574, 10.50020805,  9.86616036,
                         9.23211267,  6.9240845 ,  4.61605633,  2.30802817,
                         0.]),
                },
                "std_u_post": {
                    4: np.array([
                        1.00000000e-08, 3.83108621e-01, 5.24034583e-01, 6.19311172e-01,
                        6.88187037e-01, 7.38109138e-01, 7.72777975e-01, 7.94211940e-01,
                        8.03489503e-01, 8.01052278e-01, 7.86811363e-01, 7.60124775e-01,
                        7.19632114e-01, 6.62833313e-01, 5.85027417e-01, 4.76059799e-01,
                        3.04157250e-01, 5.52807618e-01, 7.02390164e-01, 8.09825181e-01,
                        8.90522116e-01, 9.51330452e-01, 9.95919895e-01, 1.02642582e+00,
                        1.04410261e+00, 1.04961767e+00, 1.04318287e+00, 1.02459211e+00,
                        9.93182076e-01, 9.47698196e-01, 8.85994965e-01, 8.04367999e-01,
                        6.95860808e-01, 9.24981171e-01, 1.09025146e+00, 1.21795162e+00,
                        1.31903900e+00, 1.39928882e+00, 1.46212671e+00, 1.50971284e+00,
                        1.54343541e+00, 1.56415864e+00, 1.57235164e+00, 1.56814988e+00,
                        1.55137055e+00, 1.52148702e+00, 1.47755472e+00, 1.41806389e+00,
                        1.34066065e+00, 1.72745702e+00, 2.02658564e+00, 2.27253410e+00,
                        2.48068199e+00, 2.65929811e+00, 2.81319615e+00, 2.94514674e+00,
                        3.05644265e+00, 3.14701631e+00, 3.21516944e+00, 3.25672318e+00,
                        3.26291630e+00, 3.21486848e+00, 3.06597191e+00, 2.66137209e+00,
                        1.00000000e-08]),
                    16: np.array([
                        1.00000000e-08, 3.42405346e-01, 3.95586991e-01, 3.43175144e-01,
                        3.32970105e-02, 3.55938027e-01, 4.11179053e-01, 3.58143550e-01,
                        6.57077496e-02, 3.73480244e-01, 4.30679135e-01, 3.77280752e-01,
                        1.00445062e-01, 3.95462264e-01, 4.54557571e-01, 4.01025030e-01,
                        1.37920071e-01, 4.22376972e-01, 4.83373917e-01, 4.29888597e-01,
                        1.78613068e-01, 4.54826836e-01, 5.17825582e-01, 4.64510699e-01,
                        2.23132344e-01, 4.93593652e-01, 5.58821825e-01, 5.05735511e-01,
                        2.72272554e-01, 5.39743607e-01, 6.07599246e-01, 5.54729673e-01,
                        3.27101905e-01, 5.94793816e-01, 6.65910873e-01, 6.13170557e-01,
                        3.89104345e-01, 6.60996098e-01, 7.36356418e-01, 6.83571522e-01,
                        4.60426115e-01, 7.41864334e-01, 8.23007919e-01, 7.69895532e-01,
                        5.44333755e-01, 8.43262903e-01, 9.32724080e-01, 8.78842355e-01,
                        6.46140731e-01, 9.75984497e-01, 1.07832582e+00, 1.02295446e+00,
                        7.75295548e-01, 1.16321380e+00, 1.28803104e+00, 1.22981452e+00,
                        9.50710660e-01, 1.47086706e+00, 1.64527584e+00, 1.58047284e+00,
                        1.21344648e+00, 2.27484251e+00, 2.66582841e+00, 2.55137527e+00,
                        1.00000000e-08]),
                },
                # fmt: on
            },
            "M": {
                # fmt: off
                "mean_u_prior": 0.0,
                "std_u_prior": np.array([
                    1.00000000e-08, 1.27044965e-01, 2.54043033e-01, 3.80982500e-01,
                    5.07850893e-01, 6.34634902e-01, 7.61320316e-01, 8.87891954e-01,
                    1.01433359e+00, 1.14062786e+00, 1.26675618e+00, 1.39269863e+00,
                    1.51843388e+00, 1.64393900e+00, 1.76918940e+00, 1.89415860e+00,
                    2.01881814e+00, 2.14313734e+00, 2.26708312e+00, 2.39061977e+00,
                    2.51370866e+00, 2.63630800e+00, 2.75837249e+00, 2.87985295e+00,
                    3.00069594e+00, 3.12084327e+00, 3.24023147e+00, 3.35879122e+00,
                    3.47644664e+00, 3.59311453e+00, 3.70870346e+00, 3.82311273e+00,
                    3.93623119e+00, 4.04793584e+00, 4.15809020e+00, 4.26654242e+00,
                    4.37312303e+00, 4.47764228e+00, 4.57988699e+00, 4.67961676e+00,
                    4.77655938e+00, 4.87040536e+00, 4.96080107e+00, 5.04734044e+00,
                    5.12955460e+00, 5.20689880e+00, 5.27873596e+00, 5.34431545e+00,
                    5.40274561e+00, 5.45295754e+00, 5.49365668e+00, 5.52325695e+00,
                    5.53978929e+00, 5.54077196e+00, 5.52302153e+00, 5.48236937e+00,
                    5.41322073e+00, 5.30783938e+00, 5.15512531e+00, 4.93838621e+00,
                    4.63091999e+00, 4.18621697e+00, 3.51244820e+00, 2.38700686e+00,
                    1.00000000e-08]),
                "mean_u_post": {
                    4: np.array([
                         0.        ,  0.33034201,  0.66531284,  1.00444924,  1.34726521,
                         1.69325052,  2.04186905,  2.39255703,  2.74472109,  3.09773616,
                         3.45094315,  3.80364647,  4.15511127,  4.50456039,  4.85117114,
                         5.19407155,  5.53233648,  5.86515871,  6.19239704,  6.5140843 ,
                         6.83025548,  7.14094798,  7.44620178,  7.74605971,  8.04056774,
                         8.32977524,  8.6137354 ,  8.89250557,  9.16614774,  9.43472903,
                         9.69832232,  9.95700688, 10.21086913, 10.45987207, 10.70343223,
                        10.94076779, 11.17101651, 11.39322422, 11.60633132, 11.80915661,
                        12.00037799, 12.17850909, 12.34187092, 12.488557  , 12.61639043,
                        12.72287013, 12.80510312, 12.85971817, 12.88275421, 12.87003782,
                        12.81880191, 12.72629021, 12.58911751, 12.40306249, 12.1627677 ,
                        11.86129162, 11.48941598, 11.0345278 , 10.47871931,  9.79534223,
                         8.94221434,  7.84663426,  6.3665834 ,  4.16155127,  0.        ]),
                    16: np.array([
                         0.        ,  0.36325722,  0.72989023,  1.09759257,  1.46394465,
                         1.82693352,  2.18658915,  2.54348851,  2.89823889,  3.25132864,
                         3.60265624,  3.95195759,  4.29895367,  4.64339311,  4.98518785,
                         5.32428999,  5.66064872,  5.99419736,  6.32481324,  6.65235249,
                         6.97666167,  7.29758064,  7.61495325,  7.92861615,  8.23839406,
                         8.54409752,  8.84551804,  9.14242959,  9.43458788,  9.72172868,
                        10.00356665, 10.27979177, 10.55006591, 10.81401925, 11.07124549,
                        11.32129771, 11.563683  , 11.79785634, 12.02321434, 12.23908487,
                        12.4447156 , 12.6392589 , 12.8217497 , 12.99109017, 13.14602677,
                        13.2851274 , 13.40676973, 13.50907224, 13.58982423, 13.64636645,
                        13.67535178, 13.6726802 , 13.63331601, 13.55116731, 13.41931975,
                        13.22903908, 12.96872625, 12.62146752, 12.15849213, 11.53560402,
                        10.6828442 ,  9.48728702,  7.76865922,  5.10950572,  0.        ]),
                },
                "std_u_post": {
                    4: np.array([
                        1.00000000e-08, 4.09287672e-02, 7.66616104e-02, 1.07205221e-01,
                        1.32609162e-01, 1.52978100e-01, 1.68489046e-01, 1.79415918e-01,
                        1.86164591e-01, 1.89322243e-01, 1.89723555e-01, 1.88529257e-01,
                        1.87291416e-01, 1.87937973e-01, 1.92569093e-01, 2.03012167e-01,
                        2.20302445e-01, 2.44024689e-01, 2.71639543e-01, 3.00701043e-01,
                        3.29432273e-01, 3.56601777e-01, 3.81391710e-01, 4.03308927e-01,
                        4.22137303e-01, 4.37919838e-01, 4.50959767e-01, 4.61830578e-01,
                        4.71383002e-01, 4.80732672e-01, 4.91207045e-01, 5.04229206e-01,
                        5.21126124e-01, 5.42569337e-01, 5.67550262e-01, 5.94577214e-01,
                        6.22232847e-01, 6.49333629e-01, 6.75038501e-01, 6.98936729e-01,
                        7.21138411e-01, 7.42379914e-01, 7.64141768e-01, 7.88755643e-01,
                        8.19449245e-01, 8.60254247e-01, 9.15711862e-01, 9.90384916e-01,
                        1.08830476e+00, 1.21102771e+00, 1.35331441e+00, 1.50885112e+00,
                        1.67210139e+00, 1.83809395e+00, 2.00206521e+00, 2.15904864e+00,
                        2.30339204e+00, 2.42811102e+00, 2.52389245e+00, 2.57736037e+00,
                        2.56770083e+00, 2.45921808e+00, 2.18196146e+00, 1.56671624e+00,
                        1.00000000e-08]),
                    16: np.array([
                        1.00000000e-08, 1.52974345e-02, 1.95289034e-02, 1.44931739e-02,
                        8.43477140e-03, 1.71768971e-02, 2.22332153e-02, 2.00493956e-02,
                        1.73979064e-02, 2.42377620e-02, 2.92568863e-02, 2.82566402e-02,
                        2.70324500e-02, 3.32287576e-02, 3.81953263e-02, 3.78850754e-02,
                        3.74289652e-02, 4.34075412e-02, 4.84454567e-02, 4.86376591e-02,
                        4.87191424e-02, 5.47462591e-02, 5.99788844e-02, 6.05692673e-02,
                        6.10702992e-02, 6.73427436e-02, 7.28971819e-02, 7.38350170e-02,
                        7.47026588e-02, 8.14109780e-02, 8.74326608e-02, 8.86975095e-02,
                        8.99129395e-02, 9.72730261e-02, 1.03943101e-01, 1.05536500e-01,
                        1.07115416e-01, 1.15429615e-01, 1.23013196e-01, 1.24954033e-01,
                        1.26909647e-01, 1.36559038e-01, 1.45397559e-01, 1.47720680e-01,
                        1.50231072e-01, 1.62156281e-01, 1.73087756e-01, 1.75830923e-01,
                        1.78548723e-01, 1.93060112e-01, 2.06364016e-01, 2.09554119e-01,
                        2.15040451e-01, 2.40084531e-01, 2.62785428e-01, 2.66207482e-01,
                        2.63426183e-01, 2.81482927e-01, 2.96325084e-01, 2.96893751e-01,
                        3.65947528e-01, 5.76570568e-01, 7.63902060e-01, 7.35682908e-01,
                        1.00000000e-08]),
                },
                # fmt: on
            },
        },
        "fig245": {
            "K": {
                # fmt: off
                "state0": np.array([
                    2.31145699, 5.04956534, 3.29277842, 3.01771807, 3.58279534,
                    0.3909957 , 5.36277645, 4.97901746, 1.36896021, 3.42734836,
                    1.20862503, 6.02315422, 5.98983812, 0.63107759, 5.59096008,
                    6.0195827 , 3.43208047, 5.70802693, 4.34424588]),
                "extForce": np.array([
                    0.00334671, 0.00489503, 0.00059625, 0.00111911, 0.00060808,
                    0.00842127, 0.01269637, 0.01080025, 0.00863639, 0.00024407,
                    0.00312375, 0.00535051, 0.00109758, 0.00234895, 0.00075334,
                    0.00428358, 0.00545618, 0.0192195 , 0.00139018]),
                "mean_u_prior": 0.0,
                "std_u_prior": np.array([
                    1.19439888, 1.71874431, 1.46561432, 1.42065183, 1.56255696,
                    0.71547565, 2.12415921, 1.86363524, 0.90461862, 1.62527652,
                    0.88924396, 1.59399026, 1.74320803, 0.95559642, 1.82196522,
                    1.6517242 , 1.54514883, 1.69988499, 1.63628824]),
                "mean_u_post": np.array([
                    2.23886936, 4.89764295, 3.2062673 , 2.92367587, 3.50443515,
                    0.41832001, 5.08961367, 4.76973622, 1.3419569 , 3.33853229,
                    1.20558774, 5.79830191, 5.76540228, 0.67045879, 5.38570998,
                    5.75544207, 3.34620526, 5.45561217, 4.22909101]),
                "std_u_post": np.array([
                    0.31695096, 0.48126162, 0.34730104, 0.44813539, 0.45549444,
                    0.26431145, 0.69205408, 0.49022342, 0.38297307, 0.47516243,
                    0.40551024, 0.39540145, 0.50345326, 0.39598113, 0.65401347,
                    0.52463143, 0.4301625 , 0.52102508, 0.4503777 ]),
                # fmt: on
            },
            "M": {
                # fmt: off
                "state0": np.array([
                    2.31145699, 5.04956534, 3.29277842, 3.01771807, 3.58279534,
                    0.3909957 , 5.36277645, 4.97901746, 1.36896021, 3.42734836,
                    1.20862503, 6.02315422, 5.98983812, 0.63107759, 5.59096008,
                    6.0195827 , 3.43208047, 5.70802693, 4.34424588]),
                "extForce": np.array([
                    0.00334671, 0.00489503, 0.00059625, 0.00111911, 0.00060808,
                    0.00842127, 0.01269637, 0.01080025, 0.00863639, 0.00024407,
                    0.00312375, 0.00535051, 0.00109758, 0.00234895, 0.00075334,
                    0.00428358, 0.00545618, 0.0192195 , 0.00139018]),
                "mean_u_prior": 0.0,
                "std_u_prior": np.array([
                    4.54973096, 5.91613879, 6.51308046, 6.68449411, 7.45956024,
                    0.31790945, 7.61795025, 7.07527355, 2.4669095 , 3.23344002,
                    1.53137971, 3.71942664, 3.81144232, 0.41320591, 4.41532987,
                    3.57002589, 8.09428022, 5.12033155, 6.04239122]),
                "mean_u_post": np.array([
                    2.31141008, 5.04951412, 3.2927354 , 3.01767577, 3.58275471,
                    0.39112458, 5.3627318 , 4.97897458, 1.36890568, 3.42729264,
                    1.20858501, 6.02309924, 5.98978241, 0.63112839, 5.59090344,
                    6.01952937, 3.43204485, 5.70797806, 4.3441974 ]),
               "std_u_post": np.array([
                    0.0066783 , 0.01058533, 0.00669131, 0.0077214 , 0.00761012,
                    0.00568429, 0.02562336, 0.01247537, 0.0099831 , 0.00613354,
                    0.00787526, 0.0098413 , 0.00943643, 0.00681284, 0.01003055,
                    0.01253597, 0.01019152, 0.01866512, 0.00731186]),
                # fmt: on
            },
        },
    }
    return ref_values
